#pragma checksum "C:\Users\jlede\Documents\Curso_Strapp\CursoStrapp\Proyectos\Proyecto_estudiante\Estudiante.MVC\Views\Estudiantes\Estudiante.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "3f292b06903ab81882c9fdaa7f37774d4a6a62f0"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Estudiantes_Estudiante), @"mvc.1.0.view", @"/Views/Estudiantes/Estudiante.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\jlede\Documents\Curso_Strapp\CursoStrapp\Proyectos\Proyecto_estudiante\Estudiante.MVC\Views\_ViewImports.cshtml"
using Estudiante.MVC;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\jlede\Documents\Curso_Strapp\CursoStrapp\Proyectos\Proyecto_estudiante\Estudiante.MVC\Views\_ViewImports.cshtml"
using Estudiante.MVC.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"3f292b06903ab81882c9fdaa7f37774d4a6a62f0", @"/Views/Estudiantes/Estudiante.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"0ec5e8a6eef812f5b4767f5f7508dabd2f4da21a", @"/Views/_ViewImports.cshtml")]
    public class Views_Estudiantes_Estudiante : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "selecciona", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "M", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "F", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "mexicano", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "extranjero", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Aguascalientes", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Estado de Mexico", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Ciudad de Mexico", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Informatica", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_10 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Bioquimica", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_11 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Mecatronica", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_12 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "Gestion", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_13 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "1ro", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_14 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "2do", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_15 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "3ro", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_16 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "4to", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_17 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "5to", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_18 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "6to", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_19 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "7to", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_20 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "8vo", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_21 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "9no", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_22 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("formulario"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_23 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("formModal1"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_24 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "8-10", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_25 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "11-12", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_26 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "13-15", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_27 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("formModal2"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("<style>\r\n    #materiasCursadas td,\r\n    tr {\r\n        text-align: center;\r\n    }\r\n</style>\r\n<h1 id=\"titulo\">Alta de Alumno</h1>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3f292b06903ab81882c9fdaa7f37774d4a6a62f012140", async() => {
                WriteLiteral(@"

    <fieldset>
        <legend>Informacion basica</legend>
        <hr>
        <br><br>
        <table style=""width: 100%;"" class=""table-active"">
            <tr>
                <td> <label for=""nombre"" class=""col-sm-2 col-form-label"">Nombre</label> </td>
                <td><input type=""text"" name=""txtNombre"" id=""txtNombre"" /></td>
                <td><label for=""apellidoP"" class=""col-sm-2 col-form-label"">Apellido Paterno:</label> </td>
                <td><input type=""text"" name=""txtApellPa"" id=""txtApellPa"" /></td>
                <td><label for=""apellidoM"" class=""col-sm-2 col-form-label"">Apellido Materno:</label></td>
                <td><input type=""text"" name=""txtApellMa"" id=""txtApellMa"" /></td>
                <td></td>
            </tr>
        </table>
        <br><br>
    </fieldset>

    <fieldset>
        <legend>Datos personales</legend>
        <hr>
        <table style=""width: 100%;"" class=""table-active"">
            <tr>
                <td>Sexo:</td>
             ");
                WriteLiteral("   <td>\r\n                    <select name=\"sexo\" id=\"sexo\">\r\n                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3f292b06903ab81882c9fdaa7f37774d4a6a62f013586", async() => {
                    WriteLiteral("Selecciona");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3f292b06903ab81882c9fdaa7f37774d4a6a62f014838", async() => {
                    WriteLiteral("Masculino");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_1.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3f292b06903ab81882c9fdaa7f37774d4a6a62f016089", async() => {
                    WriteLiteral("Femenino");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_2.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                    </select>
                </td>
                <td>CURP:</td>
                <td><input type=""text"" name=""txtCurp"" id=""txtCurp"" /></td>
                <td>Fecha de nacimiento</td>
                <td><input type=""date"" name=""txtFechaNaci"" id=""txtFechaNaci"" /></td>
            </tr>
            <tr>
                <td>Nacionalidad:</td>
                <td>
                    <select name=""nacionalidad"" id=""nacionalidad"">
                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3f292b06903ab81882c9fdaa7f37774d4a6a62f017815", async() => {
                    WriteLiteral("Selecciona");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3f292b06903ab81882c9fdaa7f37774d4a6a62f019067", async() => {
                    WriteLiteral("Mexicano");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_3.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_3);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3f292b06903ab81882c9fdaa7f37774d4a6a62f020317", async() => {
                    WriteLiteral("Extranjero");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_4.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                    </select>
                </td>
                <br><br>

            </tr>
        </table>
        <br>

    </fieldset>

    <fieldset>
        <legend>Datos de contacto</legend>
        <hr>
        <br><br>
        <table style=""width: 100%;"" class=""table-active"">
            <tr>
                <td>Telefono:</td>
                <td><input type=""tel"" name=""txtTelefono"" id=""txtTelefono"" /></td>
                <td>Correo:</td>
                <td><input type=""text"" name=""txtCorreo"" id=""txtCorreo"" /></td>
            </tr>
        </table>
        <br />
        <br />
    </fieldset>

    <fieldset>
        <legend>Domicilio</legend>
        <br>
        <br>
        <table style=""width: 100%;"" class=""table-active"">
            <tr>
                <td>Calle:</td>
                <td>
                    <input type=""text"" name=""txtCalle"" id=""txtCalle"" />
                </td>
                <td>Num Int:</td>
                <td>
             ");
                WriteLiteral(@"       <input type=""text"" name=""txtNumInt"" id=""txtNumInt"" />

                </td>
                <td>Num Ext:</td>
                <td>
                    <input type=""text"" name=""txtNumExt"" id=""txtNumExt"" />

                </td>
                <td>Colonia:</td>
                <td>
                    <input type=""text"" name=""txtColonia"" id=""txtColonia"" />
                </td>
            </tr>

            <tr>
                <td>Municipio:</td>
                <td>
                    <input type=""text"" name=""txtMunicipio"" id=""txtMunicipio"" />
                </td>
                <td>Estado:</td>
                <td>
                    <select name=""estado"" id=""estado"">
                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3f292b06903ab81882c9fdaa7f37774d4a6a62f023395", async() => {
                    WriteLiteral("Selecciona");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3f292b06903ab81882c9fdaa7f37774d4a6a62f024647", async() => {
                    WriteLiteral("Aguascalientes");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_5.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_5);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3f292b06903ab81882c9fdaa7f37774d4a6a62f025903", async() => {
                    WriteLiteral("Estado de Mexico");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_6.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_6);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3f292b06903ab81882c9fdaa7f37774d4a6a62f027161", async() => {
                    WriteLiteral("Ciudad de Mexico");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_7.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_7);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3f292b06903ab81882c9fdaa7f37774d4a6a62f028419", async() => {
                    WriteLiteral("Zacatecas");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_8.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_8);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                    </select>
                </td>
                <td>Codigo postal:</td>
                <td>
                    <input type=""text"" name=""txtCp"" id=""txtCp"" />
                </td>
            </tr>
        </table>
        <br />
        <br>

    </fieldset>

    <fieldset>
        <legend>Datos Escolares</legend>
        <hr>
        <br><br>
        <table style=""width: 100%;"" class=""table-active"">
            <tr>
                <td>Matricula:</td>
                <td>
                    <input type=""text"" name=""txtMatricula"" id=""txtMatricula"" />
                </td>

                <td>Carrera: </td>
                <td>
                    <select name=""txtCarrera"" id=""txtCarrera"">
                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3f292b06903ab81882c9fdaa7f37774d4a6a62f030438", async() => {
                    WriteLiteral("Selecciona");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3f292b06903ab81882c9fdaa7f37774d4a6a62f031690", async() => {
                    WriteLiteral("Informatica");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_9.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_9);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3f292b06903ab81882c9fdaa7f37774d4a6a62f032943", async() => {
                    WriteLiteral("Bioquimica");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_10.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_10);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3f292b06903ab81882c9fdaa7f37774d4a6a62f034197", async() => {
                    WriteLiteral("Mecatronica");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_11.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_11);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3f292b06903ab81882c9fdaa7f37774d4a6a62f035452", async() => {
                    WriteLiteral("Gestion");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_12.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_12);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"

                    </select>
                </td>
                <td>Fecha de ingreso</td>
                <td>
                    <input type=""date"" name=""txtFechaIng"" id=""txtFechaIng"" />
                </td>
            </tr>
            <tr>
                <td>Semestre:</td>
                <td>
                    <select name=""txtSemestre"" id=""txtSemestre"">
                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3f292b06903ab81882c9fdaa7f37774d4a6a62f037096", async() => {
                    WriteLiteral("Selecciona");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3f292b06903ab81882c9fdaa7f37774d4a6a62f038348", async() => {
                    WriteLiteral("1ro");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_13.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_13);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3f292b06903ab81882c9fdaa7f37774d4a6a62f039595", async() => {
                    WriteLiteral("2do");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_14.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_14);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3f292b06903ab81882c9fdaa7f37774d4a6a62f040842", async() => {
                    WriteLiteral("3ro");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_15.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_15);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3f292b06903ab81882c9fdaa7f37774d4a6a62f042089", async() => {
                    WriteLiteral("4to");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_16.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_16);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3f292b06903ab81882c9fdaa7f37774d4a6a62f043336", async() => {
                    WriteLiteral("5to");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_17.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_17);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3f292b06903ab81882c9fdaa7f37774d4a6a62f044583", async() => {
                    WriteLiteral("6to");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_18.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_18);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3f292b06903ab81882c9fdaa7f37774d4a6a62f045830", async() => {
                    WriteLiteral("7to");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_19.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_19);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3f292b06903ab81882c9fdaa7f37774d4a6a62f047077", async() => {
                    WriteLiteral("8vo");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_20.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_20);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3f292b06903ab81882c9fdaa7f37774d4a6a62f048324", async() => {
                    WriteLiteral("9no");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_21.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_21);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n\r\n                    </select>\r\n                </td>\r\n\r\n            </tr>\r\n        </table>\r\n        <br />\r\n        <br />\r\n    </fieldset>\r\n\r\n\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_22);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"

<div id=""div1"">
<hr>
<button type=""button"" class=""btn btn-primary"" data-bs-toggle=""modal"" data-bs-target=""#exampleModal2"" id=""boton2""
    onclick="" RegistrarConModal2()"">Agregar Materias Cursando</button>

<fieldset>
    <legend>Materias Cursando</legend>
    <br><br>
    <table class=""table-active"" style=""width: 100%;"" id=""materiasCursando"">
        <thead>
            <tr>
                <th>Id</th>
                <th>Clave</th>
                <th>Materia</th>
                <th>Horario</th>
                <th>1er Parcial</th>
                <th>2do Parcial</th>
                <th>3er Parcial</th>


            </tr>

        </thead>
        <tbody class=""table-active"">

        </tbody>


    </table>
    
</fieldset>

<br><br>
</div>


<div id=""div2"">
    <hr>
<button type=""button"" class=""btn btn-primary"" data-bs-toggle=""modal"" data-bs-target=""#exampleModal"" id=""boton1""
    onclick="" RegistrarConModal()"">Agregar Materias Cursada</button>
<fieldset>

  ");
            WriteLiteral(@"  <legend>Materias Cursadas</legend>
    <br><br>
    <table class=""table-active"" style=""width: 100%;"" id=""materiasCursadas"">
        <thead>
            <tr>
                <th>Id</th>
                <th>Clave</th>
                <th>Materia</th>
                <th>1er Parcial</th>
                <th>2do Parcial</th>
                <th>3er Parcial</th>
                <th>Cailificacion Final</th>

            </tr>

        </thead>
        <tbody class=""table-active"">

        </tbody>


    </table>

</fieldset>

<br>
<br>
</div>


<button id=""btnGuardar"" onclick=""Enviar()"">Guardar</button>
<button id=""btnCerrar"" onclick=""window.location.href='/Estudiantes/Listado'"">Cerrar</button>


<br>
<br>
<br>
<br><br>
<div class=""modal fade"" id=""exampleModal"" tabindex=""-1"" aria-labelledby=""exampleModalLabel"" aria-hidden=""true"">
    <div class=""modal-dialog"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h5 class=""modal-title");
            WriteLiteral("\" id=\"exampleModalLabel\">Materia Cursada</h5>\r\n                <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3f292b06903ab81882c9fdaa7f37774d4a6a62f053203", async() => {
                WriteLiteral(@"
                    <div class=""mb-3"">
                        <label for=""recipient-name"" class=""col-form-label"">idEstudiante:</label>
                        <input type=""text"" class=""form-control"" id=""idEstudianteMatCda"">
                    </div>

                    <div class=""mb-3"">
                        <label for=""recipient-name"" class=""col-form-label"">Clave Materia:</label>
                        <input type=""text"" class=""form-control"" id=""claveMatCda"">
                    </div>

                    <div class=""mb-3"">
                        <label for=""recipient-name"" class=""col-form-label"">Nombre Materia:</label>
                        <input type=""text"" class=""form-control"" id=""materiaCda"">
                    </div>

                    <div class=""mb-3"">
                        <label for=""recipient-name"" class=""col-form-label"">Calificacion 1er:</label>
                        <input type=""text"" class=""form-control"" id=""caliPrimerPMCda"">
                    </div>

 ");
                WriteLiteral(@"                   <div class=""mb-3"">
                        <label for=""recipient-name"" class=""col-form-label"">Calificacion 2do:</label>
                        <input type=""text"" class=""form-control"" id=""caliSegundoPMCda"">
                    </div>

                    <div class=""mb-3"">
                        <label for=""recipient-name"" class=""col-form-label"">Calificacion 3ro:</label>
                        <input type=""text"" class=""form-control"" id=""caliTercerPMCda"">
                    </div>


                ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_23);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </div>
            <div class=""modal-footer"">
                <button type=""button"" class=""btn btn-secondary"" data-bs-dismiss=""modal"">Close</button>
                <button type=""button"" class=""btn btn-primary"" onclick=""EnviardelModal1()""
                    id=""btnGuardar1"">Guardar</button>
            </div>
        </div>
    </div>
</div>


<br>
<br>
<br>
<br><br>
<div class=""modal fade"" id=""exampleModal2"" tabindex=""-1"" aria-labelledby=""exampleModalLabel"" aria-hidden=""true"">
    <div class=""modal-dialog"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h5 class=""modal-title"" id=""exampleModalLabel"">Materia Cursando</h5>
                <button type=""button"" class=""btn-close"" data-bs-dismiss=""modal"" aria-label=""Close""></button>
            </div>
            <div class=""modal-body"">
                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3f292b06903ab81882c9fdaa7f37774d4a6a62f057120", async() => {
                WriteLiteral(@"
                    <div class=""mb-2"">
                        <label for=""recipient-name"" class=""col-form-label"">idEstudiante:</label>
                        <input type=""text"" class=""form-control"" id=""idEstudianteMatCndo"">
                    </div>

                    <div class=""mb-2"">
                        <label for=""recipient-name"" class=""col-form-label"">Clave Materia:</label>
                        <input type=""text"" class=""form-control"" id=""claveMatCdo"">
                    </div>

                    <div class=""mb-2"">
                        <label for=""recipient-name"" class=""col-form-label"">Nombre Materia:</label>
                        <input type=""text"" class=""form-control"" id=""materiaCdo"">
                    </div>

                    <div class=""mb-2"">
                        <label for=""recipient-name"" class=""col-form-label"">Horario:</label>
                        <select name=""horarioMat"" id=""horarioMat"">
                            ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3f292b06903ab81882c9fdaa7f37774d4a6a62f058416", async() => {
                    WriteLiteral("Selecciona");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                            ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3f292b06903ab81882c9fdaa7f37774d4a6a62f059672", async() => {
                    WriteLiteral("8-10");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_24.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_24);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                            ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3f292b06903ab81882c9fdaa7f37774d4a6a62f060924", async() => {
                    WriteLiteral("11-12");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_25.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_25);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n                            ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3f292b06903ab81882c9fdaa7f37774d4a6a62f062177", async() => {
                    WriteLiteral("13-15");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_26.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_26);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                        </select>
                    </div>

                    <div class=""mb-2"">
                        <label for=""recipient-name"" class=""col-form-label"">Calificacion 1er:</label>
                        <input type=""text"" class=""form-control"" id=""caliPrimerPMCdo"">
                    </div>

                    <div class=""mb-2"">
                        <label for=""recipient-name"" class=""col-form-label"">Calificacion 2do:</label>
                        <input type=""text"" class=""form-control"" id=""caliSegundoPMCdo"">
                    </div>

                    <div class=""mb-2"">
                        <label for=""recipient-name"" class=""col-form-label"">Calificacion 3ro:</label>
                        <input type=""text"" class=""form-control"" id=""caliTercerPMCdo"">
                    </div>


                ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_27);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
            </div>
            <div class=""modal-footer"">
                <button type=""button"" class=""btn btn-secondary"" data-bs-dismiss=""modal"">Close</button>
                <button type=""button"" class=""btn btn-primary"" onclick=""EnviardelModal2()""
                    id=""btnGuardar2"">Guardar</button>
            </div>
        </div>
    </div>
</div>


<script>
    var accion = """";
    var idEstudiante = 0;
    var accion2 = 0;
    var tabla;
    var tbody;

    var tabla1;
    var tbody1;

    var idmateriasCndo = 0;
    var idmateriasCdas = 0;
    // ESTA FUNCION SE EJECUTA AL CARGAR LA PAGINA POR COMPLETO
    window.onload = function () {
        //1 Inicio
        //2 Obtner el path del url 
        const path = window.location.pathname;
        //3 Obtner la accion a realizar con la URL (REGISTRA O EDITAR  )      
        const arreglopath = path.split(""/"");
        const accionURL = arreglopath[2];
        // 4 Si es Editar
        if (accionURL.toUpperCase() == ""ED");
            WriteLiteral(@"ITAR"") {
            //4.1 Resigtrar la accion EDITAR como variable global
            accion = ""EDITAR"";
            //4.2 Actualizar el titulo a Edicion de empleado
            const titulo = document.getElementById(""titulo"");
            titulo.innerHTML = 'Edicion de Estudiante';
            const tituloModal = document.getElementById(""exampleModalLabel"");
            //4.3 Cargar la informacion de empleado
            bloqueo();
            cargarEnpantalla();
            console.log(accion);

        }
        //5 Si es registro
        else if (accionURL.toUpperCase() == ""REGISTRO"") {
            //5.1 Resigtrar la accion REGISTRO como variable global
            accion = ""REGISTRO"";
            //5.2 Actualizar el titulo a Edicion de empleado
            bloqueo();
            const titulo = document.getElementById(""titulo"");
            titulo.innerHTML = 'Alta de Estudiante';
            
            tablaEliminar = document.getElementById(""div1"");
            tablaEliminar.in");
            WriteLiteral(@"nerHTML = "" "";
            
            tablaEliminar1 = document.getElementById(""div2"");
            tablaEliminar1.innerHTML = "" "";
            
            console.log(accion);

        }
        //6 Si es Consulta 
        else if (accionURL.toUpperCase() == ""CONSULTAR"") {
            accion = ""CONSULTAR"";
            //5.2 Actualizar el titulo a Edicion de empleado
            const titulo = document.getElementById(""titulo"");
            titulo.innerHTML = 'Consulta de Estudiante';
            console.log(accion);
            cargarEnpantalla();
            bloqueo();
        }

        else {

            alert(""Accion no Valida"");

        }


    }

    // FUNCION PARA DESHABILITAR LOS INPUTS y QUITAR EL BOTON

    function bloqueo() {
        if (accion == ""CONSULTAR"") {
            //   var button = document.querySelector("".button"");
            //  button.disabled = true;
            //document.getElementsByClassName(""btn-primary"").disabled = true;
            tbo");
            WriteLiteral(@"dy = document.getElementById(""materiasCursando"");

            var rowCount = tbody.rows.length;
            console.log(tbody);

            console.log(""tamaño de tabla "" + rowCount);
            /*for (var x=rowCount-1; x>0; x--) {
               myTable.deleteRow(x);
            }
            */
            document.getElementById(""btnGuardar"").style.display = 'none';
            document.getElementById(""boton1"").disabled = true;
            document.getElementById(""boton2"").disabled = true;

            document.getElementById(""txtNombre"").disabled = true;
            document.getElementById(""txtApellPa"").disabled = true;
            document.getElementById(""txtApellMa"").disabled = true;
            document.getElementById(""sexo"").disabled = true;
            document.getElementById(""txtCurp"").disabled = true;
            document.getElementById(""txtTelefono"").disabled = true;
            document.getElementById(""txtCorreo"").disabled = true;
            document.getElementById(""txtFe");
            WriteLiteral(@"chaNaci"").disabled = true;
            document.getElementById(""nacionalidad"").disabled = true;


            document.getElementById(""txtCalle"").disabled = true;
            document.getElementById(""txtNumExt"").disabled = true;
            document.getElementById(""txtNumInt"").disabled = true;
            document.getElementById(""txtColonia"").disabled = true;
            document.getElementById(""txtMunicipio"").disabled = true;
            document.getElementById(""estado"").disabled = true;
            document.getElementById(""txtCp"").disabled = true;

            document.getElementById(""txtFechaIng"").disabled = true;
            document.getElementById(""txtMatricula"").disabled = true;
            document.getElementById(""txtCarrera"").disabled = true;
            document.getElementById(""txtSemestre"").disabled = true;



        }
        else {

            document.getElementById(""btnGuardar"").style.display = 'inline';


            document.getElementById(""boton1"").disabled = false;");
            WriteLiteral(@"
            document.getElementById(""boton2"").disabled = false;


            document.getElementById(""txtNombre"").disabled = false;
            document.getElementById(""txtApellPa"").disabled = false;
            document.getElementById(""txtApellMa"").disabled = false;
            document.getElementById(""sexo"").disabled = false;
            document.getElementById(""txtCurp"").disabled = false;
            document.getElementById(""txtTelefono"").disabled = false;
            document.getElementById(""txtCorreo"").disabled = false;
            document.getElementById(""txtFechaNaci"").disabled = false;
            document.getElementById(""nacionalidad"").disabled = false;


            document.getElementById(""txtCalle"").disabled = false;
            document.getElementById(""txtNumExt"").disabled = false;
            document.getElementById(""txtNumInt"").disabled = false;
            document.getElementById(""txtColonia"").disabled = false;
            document.getElementById(""txtMunicipio"").disabled =");
            WriteLiteral(@" false;
            document.getElementById(""estado"").disabled = false;
            document.getElementById(""txtCp"").disabled = false;

            document.getElementById(""txtFechaIng"").disabled = false;
            document.getElementById(""txtMatricula"").disabled = false;
            document.getElementById(""txtCarrera"").disabled = false;
            document.getElementById(""txtSemestre"").disabled = false;


        }

    }

    //ESTA FUNCION SE USA EN EDITAR Y REGISTRAR

    function obtenerPeticion() {

        //1 Inicio
        //2 Obtener los valores de los elemetos html y sus valores
        const Nombre = document.getElementById(""txtNombre"").value;
        const ApellidoPaterno = document.getElementById(""txtApellPa"").value;
        const ApellidoMaterno = document.getElementById(""txtApellMa"").value;
        const Sexo = document.getElementById(""sexo"").value;
        const CURP = document.getElementById(""txtCurp"").value;
        const FechaNaci = document.getElementById(""txt");
            WriteLiteral(@"FechaNaci"").value;
        const Nacionalidad = document.getElementById(""nacionalidad"").value;
        const Telefono = document.getElementById(""txtTelefono"").value;
        const Correo = document.getElementById(""txtCorreo"").value;

        const Calle = document.getElementById(""txtCalle"").value;
        const NumExt = document.getElementById(""txtNumExt"").value;
        const NumInt = document.getElementById(""txtNumInt"").value;
        const Colonia = document.getElementById(""txtColonia"").value;
        const Municipio = document.getElementById(""txtMunicipio"").value;
        const Estado = document.getElementById(""estado"").value;
        const Cp = document.getElementById(""txtCp"").value;

        const Matricula = document.getElementById(""txtMatricula"").value;
        const Carrera = document.getElementById(""txtCarrera"").value;
        const Semestre = document.getElementById(""txtSemestre"").value;
        const FechaIng = document.getElementById(""txtFechaIng"").value;

        //3       Crea");
            WriteLiteral(@"r la peticion JSON  
        var raw = JSON.stringify({
            ""idEstudiante"": idEstudiante,
            ""matricula"": Matricula,
            ""carrera"": Carrera,
            ""fechaIngreso"": FechaIng,
            ""semestre"": Semestre,
            ""activo"": true,
            ""nombre"": Nombre,
            ""apellidoPaterno"": ApellidoPaterno,
            ""apellidoMaterno"": ApellidoMaterno,
            ""sexo"": Sexo,
            ""curp"": CURP,
            ""telefono"": Telefono,
            ""correo"": Correo,
            ""fechaNacimiento"": FechaNaci,
            ""nacionalidad"": Nacionalidad,
            ""direccion"": {
                ""calle"": Calle,
                ""numeroExterior"": NumExt,
                ""numeroInterior"": NumInt,
                ""colonia"": Colonia,
                ""municipio"": Municipio,
                ""estado"": Estado,
                ""codigoPostal"": Cp
            }
        });

        return raw;

    }

    function obtenerFecha(fecha) {
        fecha = fecha");
            WriteLiteral(@".substring(0, 10);
        return fecha;
    }

    //ESTA FUNCION SE USA CUANDO VAMOS A EDITAR y CONSULTAR
    function cargarEnpantalla() {
        //1 Iniciar

        //2 Obtener id empleado
        const path = window.location.pathname;
        const arreglopath = path.split(""/"");
        const idEstudianteURL = arreglopath[3];
        console.log(idEstudianteURL);
        idEstudiante = idEstudianteURL;
        //  meter consulta para ver si el idEstudiante esta en la base de las materias

        var requestOptions = {
            method: 'GET',
            redirect: 'follow'
        };

        fetch(""https://localhost:5003/Estudiantes/"" + idEstudiante, requestOptions)
            .then(response => response.json())
            .then(estudiante => {
                var materiasCndo = (estudiante.materiascursando);

                var materiasCdas = (estudiante.materiascursadas);
                console.log(estudiante);
                console.log(materiasCndo);
           ");
            WriteLiteral(@"     console.log(materiasCdas);

                if (materiasCndo == null && materiasCdas == null) {
                 
                    const Nombre = document.getElementById(""txtNombre"");
                    const ApellidoPaterno = document.getElementById(""txtApellPa"");
                    const ApellidoMaterno = document.getElementById(""txtApellMa"");
                    const Sexo = document.getElementById(""sexo"");
                    const CURP = document.getElementById(""txtCurp"");
                    const idEstudianteMatCda = document.getElementById(""idEstudianteMatCda"");
                    const clave = document.getElementById(""claveMatCda"");
                    const materia = document.getElementById(""materiaCda"");
                    const caliPrimerPMCda = document.getElementById(""caliPrimerPMCda"");
                    const caliSegundoPMCda = document.getElementById(""caliSegundoPMCda"");
                    const FechaNaci = document.getElementById(""txtFechaNaci"");
                ");
            WriteLiteral(@"    const Nacionalidad = document.getElementById(""nacionalidad"");
                    const Telefono = document.getElementById(""txtTelefono"");
                    const Correo = document.getElementById(""txtCorreo"");

                    const Calle = document.getElementById(""txtCalle"");
                    const NumExt = document.getElementById(""txtNumExt"");
                    const NumInt = document.getElementById(""txtNumInt"");
                    const Colonia = document.getElementById(""txtColonia"");
                    const Municipio = document.getElementById(""txtMunicipio"");
                    const Estado = document.getElementById(""estado"");
                    const Cp = document.getElementById(""txtCp"");

                    const Matricula = document.getElementById(""txtMatricula"");
                    const Carrera = document.getElementById(""txtCarrera"");
                    const Semestre = document.getElementById(""txtSemestre"");
                    const FechaIng = document.getEleme");
            WriteLiteral(@"ntById(""txtFechaIng"");

                    //3.3 - Pintar las propiedades en los elementos html
                    Nombre.value = estudiante.nombre;
                    ApellidoPaterno.value = estudiante.apellidoPaterno;
                    ApellidoMaterno.value = estudiante.apellidoMaterno;
                    Sexo.value = estudiante.sexo;
                    CURP.value = estudiante.curp;
                    FechaNaci.value = obtenerFecha(estudiante.fechaNacimiento);
                    Nacionalidad.value = estudiante.nacionalidad;
                    Telefono.value = estudiante.telefono;
                    Correo.value = estudiante.correo;

                    Calle.value = estudiante.direccion.calle;
                    NumExt.value = estudiante.direccion.numeroExterior;
                    NumInt.value = estudiante.direccion.numeroInterior;
                    Colonia.value = estudiante.direccion.colonia;
                    Municipio.value = estudiante.direccion.municipio;
          ");
            WriteLiteral(@"          Estado.value = estudiante.direccion.estado;
                    Cp.value = estudiante.direccion.codigoPostal;

                    Matricula.value = estudiante.matricula;
                    FechaIng.value = obtenerFecha(estudiante.fechaIngreso);
                    Carrera.value = estudiante.carrera;
                    Semestre.value = estudiante.semestre;



                }
                else if (materiasCndo != null && materiasCdas == null) {

                    //3.1 - Si el servicio me regreso el empleado, pintarlo en pantalla
                    //3.2 - Obtner lo elementos html

                    const Nombre = document.getElementById(""txtNombre"");
                    const ApellidoPaterno = document.getElementById(""txtApellPa"");
                    const ApellidoMaterno = document.getElementById(""txtApellMa"");
                    const Sexo = document.getElementById(""sexo"");
                    const CURP = document.getElementById(""txtCurp"");
                    c");
            WriteLiteral(@"onst FechaNaci = document.getElementById(""txtFechaNaci"");
                    const Nacionalidad = document.getElementById(""nacionalidad"");
                    const Telefono = document.getElementById(""txtTelefono"");
                    const Correo = document.getElementById(""txtCorreo"");

                    const Calle = document.getElementById(""txtCalle"");
                    const NumExt = document.getElementById(""txtNumExt"");
                    const NumInt = document.getElementById(""txtNumInt"");
                    const Colonia = document.getElementById(""txtColonia"");
                    const Municipio = document.getElementById(""txtMunicipio"");
                    const Estado = document.getElementById(""estado"");
                    const Cp = document.getElementById(""txtCp"");

                    const Matricula = document.getElementById(""txtMatricula"");
                    const Carrera = document.getElementById(""txtCarrera"");
                    const Semestre = document.getElementB");
            WriteLiteral(@"yId(""txtSemestre"");
                    const FechaIng = document.getElementById(""txtFechaIng"");

                    //3.3 - Pintar las propiedades en los elementos html
                    Nombre.value = estudiante.nombre;
                    ApellidoPaterno.value = estudiante.apellidoPaterno;
                    ApellidoMaterno.value = estudiante.apellidoMaterno;
                    Sexo.value = estudiante.sexo;
                    CURP.value = estudiante.curp;
                    FechaNaci.value = obtenerFecha(estudiante.fechaNacimiento);
                    Nacionalidad.value = estudiante.nacionalidad;
                    Telefono.value = estudiante.telefono;
                    Correo.value = estudiante.correo;

                    Calle.value = estudiante.direccion.calle;
                    NumExt.value = estudiante.direccion.numeroExterior;
                    NumInt.value = estudiante.direccion.numeroInterior;
                    Colonia.value = estudiante.direccion.colonia;
      ");
            WriteLiteral(@"              Municipio.value = estudiante.direccion.municipio;
                    Estado.value = estudiante.direccion.estado;
                    Cp.value = estudiante.direccion.codigoPostal;

                    Matricula.value = estudiante.matricula;
                    FechaIng.value = obtenerFecha(estudiante.fechaIngreso);
                    Carrera.value = estudiante.carrera;
                    Semestre.value = estudiante.semestre;

                    // CARGAR MATERIAS CURSANDO EN LA TABLA
                    const materiasCndo = Object.values(estudiante.materiascursando);
                    tabla = document.getElementById(""materiasCursando"");
                    tbody = tabla.querySelector(""tbody"");
                    console.log(tbody);


                    for (let i = 0; i < materiasCndo.length; i++) {
                        idmateriasCndo = materiasCndo[i].idMateriaCursando;
                        console.log(idmateriasCndo);
                        const tr = document.");
            WriteLiteral(@"createElement(""tr"");
                        tbody.appendChild(tr);
                        console.log(materiasCndo);

                        var td = null;
                        var a = null;

                        td = document.createElement(""td"");
                        td.textContent = materiasCndo[i].idMateriaCursando;
                        tr.appendChild(td);

                        td = document.createElement(""td"");
                        td.textContent = materiasCndo[i].clave;
                        tr.appendChild(td);

                        td = document.createElement(""td"");
                        td.textContent = materiasCndo[i].materia;
                        tr.appendChild(td);

                        td = document.createElement(""td"");
                        td.textContent = materiasCndo[i].horario;
                        tr.appendChild(td);

                        td = document.createElement(""td"");
                        td.textContent = materiasCndo[i");
            WriteLiteral(@"].caliPrimerP;
                        tr.appendChild(td);

                        td = document.createElement(""td"");
                        td.textContent = materiasCndo[i].caliSegundoP;
                        tr.appendChild(td);

                        td = document.createElement(""td"");
                        td.textContent = materiasCndo[i].caliTercerP;
                        tr.appendChild(td);


                        if (accion != ""CONSULTAR"") {
                            
                            //editar
                            td = document.createElement(""td"");
                            a = document.createElement(""a"");
                            a.textContent = ""Editar"";
                            a.innerHTML = '<button type=\""button\"" class=\""btn btn-primary\""  data-bs-toggle=\""modal\"" data-bs-target=\""#exampleModal2\"" onclick=\""EditarConModal2(' + materiasCndo[i].idMateriaCursando + ')\"">Editar</button>';
                            td.appendChild(a);
        ");
            WriteLiteral(@"                    tr.appendChild(td);

                            //eliminar
                            td = document.createElement(""td"");
                            a = document.createElement(""a"");
                            a.innerHTML = '<button type=\""button\"" class=\""btn btn-primary\"" onclick=\""EliminarConModal2(' + materiasCndo[i].idMateriaCursando + ')\"">Eliminar</button>';
                            td.appendChild(a);
                            tr.appendChild(td);

                        }



                    }
                    // FIN DE CARGAR MATERIAS CURSANDO

                }//////
                else if (materiasCndo == null && materiasCdas != null) {

                    //3.1 - Si el servicio me regreso el empleado, pintarlo en pantalla
                    //3.2 - Obtner lo elementos html

                    const Nombre = document.getElementById(""txtNombre"");
                    const ApellidoPaterno = document.getElementById(""txtApellPa"");
           ");
            WriteLiteral(@"         const ApellidoMaterno = document.getElementById(""txtApellMa"");
                    const Sexo = document.getElementById(""sexo"");
                    const CURP = document.getElementById(""txtCurp"");
                    const FechaNaci = document.getElementById(""txtFechaNaci"");
                    const Nacionalidad = document.getElementById(""nacionalidad"");
                    const Telefono = document.getElementById(""txtTelefono"");
                    const Correo = document.getElementById(""txtCorreo"");

                    const Calle = document.getElementById(""txtCalle"");
                    const NumExt = document.getElementById(""txtNumExt"");
                    const NumInt = document.getElementById(""txtNumInt"");
                    const Colonia = document.getElementById(""txtColonia"");
                    const Municipio = document.getElementById(""txtMunicipio"");
                    const Estado = document.getElementById(""estado"");
                    const Cp = document.getElement");
            WriteLiteral(@"ById(""txtCp"");

                    const Matricula = document.getElementById(""txtMatricula"");
                    const Carrera = document.getElementById(""txtCarrera"");
                    const Semestre = document.getElementById(""txtSemestre"");
                    const FechaIng = document.getElementById(""txtFechaIng"");

                    //3.3 - Pintar las propiedades en los elementos html
                    Nombre.value = estudiante.nombre;
                    ApellidoPaterno.value = estudiante.apellidoPaterno;
                    ApellidoMaterno.value = estudiante.apellidoMaterno;
                    Sexo.value = estudiante.sexo;
                    CURP.value = estudiante.curp;
                    FechaNaci.value = obtenerFecha(estudiante.fechaNacimiento);
                    Nacionalidad.value = estudiante.nacionalidad;
                    Telefono.value = estudiante.telefono;
                    Correo.value = estudiante.correo;

                    Calle.value = estudiante.direcc");
            WriteLiteral(@"ion.calle;
                    NumExt.value = estudiante.direccion.numeroExterior;
                    NumInt.value = estudiante.direccion.numeroInterior;
                    Colonia.value = estudiante.direccion.colonia;
                    Municipio.value = estudiante.direccion.municipio;
                    Estado.value = estudiante.direccion.estado;
                    Cp.value = estudiante.direccion.codigoPostal;

                    Matricula.value = estudiante.matricula;
                    FechaIng.value = obtenerFecha(estudiante.fechaIngreso);
                    Carrera.value = estudiante.carrera;
                    Semestre.value = estudiante.semestre;

                    // CARGAR MATERIAS CURSADAS EN LA TABLA
                    const materiasCdas = Object.values(estudiante.materiascursadas);
                    tabla1 = document.getElementById(""materiasCursadas"");
                    tbody1 = tabla1.querySelector(""tbody"");
                    console.log(tbody1);

           ");
            WriteLiteral(@"         for (let i = 0; i < materiasCdas.length; i++) {

                        idmateriasCdas = materiasCdas[i].idMateriaCursada;
                        console.log(idmateriasCdas);

                        const tr = document.createElement(""tr"");
                        tbody1.appendChild(tr);
                        //console.log(result[1]); 
                        //console.log(tabla);
                        console.log(materiasCdas);

                        var td = null;
                        var a = null;

                        td = document.createElement(""td"");
                        td.textContent = materiasCdas[i].idMateriaCursada;
                        tr.appendChild(td);

                        td = document.createElement(""td"");
                        td.textContent = materiasCdas[i].clave;
                        tr.appendChild(td);

                        td = document.createElement(""td"");
                        td.textContent = materiasCdas[i].materia;
 ");
            WriteLiteral(@"                       tr.appendChild(td);


                        td = document.createElement(""td"");
                        td.textContent = materiasCdas[i].caliPrimerP;
                        tr.appendChild(td);

                        td = document.createElement(""td"");
                        td.textContent = materiasCdas[i].caliSegundoP;
                        tr.appendChild(td);

                        td = document.createElement(""td"");
                        td.textContent = materiasCdas[i].caliTercerP;
                        tr.appendChild(td);
                        //console.log(tabla);

                        td = document.createElement(""td"");
                        td.textContent = materiasCdas[i].caliFinal;
                        tr.appendChild(td);

                        if (accion != ""CONSULTAR"") {
                       
                            //editar
                            td = document.createElement(""td"");
                            a = docum");
            WriteLiteral(@"ent.createElement(""a"");
                            a.textContent = ""Editar"";
                            a.innerHTML = '<button type=\""button\"" class=\""btn btn-primary\"" data-bs-toggle=\""modal\"" data-bs-target=\""#exampleModal\"" onclick=\""EditarConModal(' + materiasCdas[i].idMateriaCursada + ')\"">Editar</button>';
                            td.appendChild(a);
                            tr.appendChild(td);

                            //eliminar
                            td = document.createElement(""td"");
                            a = document.createElement(""a"");
                            a.innerHTML = '<button type=\""button\"" class=\""btn btn-primary\""  onclick=\""EliminarConModal1(' + materiasCdas[i].idMateriaCursada + ')\"">Eliminar</button>';
                            td.appendChild(a);
                            tr.appendChild(td);
                        }

                    }
                }
                /////////////////////

                else if (materiasCndo != nul");
            WriteLiteral(@"l && materiasCdas != null) {

                    //3.1 - Si el servicio me regreso el empleado, pintarlo en pantalla
                    //3.2 - Obtner lo elementos html

                    const Nombre = document.getElementById(""txtNombre"");
                    const ApellidoPaterno = document.getElementById(""txtApellPa"");
                    const ApellidoMaterno = document.getElementById(""txtApellMa"");
                    const Sexo = document.getElementById(""sexo"");
                    const CURP = document.getElementById(""txtCurp"");
                    const FechaNaci = document.getElementById(""txtFechaNaci"");
                    const Nacionalidad = document.getElementById(""nacionalidad"");
                    const Telefono = document.getElementById(""txtTelefono"");
                    const Correo = document.getElementById(""txtCorreo"");

                    const Calle = document.getElementById(""txtCalle"");
                    const NumExt = document.getElementById(""txtNumExt"");
     ");
            WriteLiteral(@"               const NumInt = document.getElementById(""txtNumInt"");
                    const Colonia = document.getElementById(""txtColonia"");
                    const Municipio = document.getElementById(""txtMunicipio"");
                    const Estado = document.getElementById(""estado"");
                    const Cp = document.getElementById(""txtCp"");

                    const Matricula = document.getElementById(""txtMatricula"");
                    const Carrera = document.getElementById(""txtCarrera"");
                    const Semestre = document.getElementById(""txtSemestre"");
                    const FechaIng = document.getElementById(""txtFechaIng"");

                    //3.3 - Pintar las propiedades en los elementos html
                    Nombre.value = estudiante.nombre;
                    ApellidoPaterno.value = estudiante.apellidoPaterno;
                    ApellidoMaterno.value = estudiante.apellidoMaterno;
                    Sexo.value = estudiante.sexo;
                    ");
            WriteLiteral(@"CURP.value = estudiante.curp;
                    FechaNaci.value = obtenerFecha(estudiante.fechaNacimiento);
                    Nacionalidad.value = estudiante.nacionalidad;
                    Telefono.value = estudiante.telefono;
                    Correo.value = estudiante.correo;

                    Calle.value = estudiante.direccion.calle;
                    NumExt.value = estudiante.direccion.numeroExterior;
                    NumInt.value = estudiante.direccion.numeroInterior;
                    Colonia.value = estudiante.direccion.colonia;
                    Municipio.value = estudiante.direccion.municipio;
                    Estado.value = estudiante.direccion.estado;
                    Cp.value = estudiante.direccion.codigoPostal;

                    Matricula.value = estudiante.matricula;
                    FechaIng.value = obtenerFecha(estudiante.fechaIngreso);
                    Carrera.value = estudiante.carrera;
                    Semestre.value = estudiante.semes");
            WriteLiteral(@"tre;

                    // CARGAR MATERIAS CURSANDO EN LA TABLA
                    const materiasCndo = Object.values(estudiante.materiascursando);
                    tabla = document.getElementById(""materiasCursando"");
                    tbody = tabla.querySelector(""tbody"");
                    console.log(tbody);


                    for (let i = 0; i < materiasCndo.length; i++) {
                        idmateriasCndo = materiasCndo[i].idMateriaCursando;
                        console.log(idmateriasCndo);
                        const tr = document.createElement(""tr"");
                        tbody.appendChild(tr);
                        console.log(materiasCndo);

                        var td = null;
                        var a = null;

                        td = document.createElement(""td"");
                        td.textContent = materiasCndo[i].idMateriaCursando;
                        tr.appendChild(td);

                        td = document.createElement(""td"");");
            WriteLiteral(@"
                        td.textContent = materiasCndo[i].clave;
                        tr.appendChild(td);

                        td = document.createElement(""td"");
                        td.textContent = materiasCndo[i].materia;
                        tr.appendChild(td);

                        td = document.createElement(""td"");
                        td.textContent = materiasCndo[i].horario;
                        tr.appendChild(td);

                        td = document.createElement(""td"");
                        td.textContent = materiasCndo[i].caliPrimerP;
                        tr.appendChild(td);

                        td = document.createElement(""td"");
                        td.textContent = materiasCndo[i].caliSegundoP;
                        tr.appendChild(td);

                        td = document.createElement(""td"");
                        td.textContent = materiasCndo[i].caliTercerP;
                        tr.appendChild(td);

                        if ");
            WriteLiteral(@"(accion != ""CONSULTAR"") {
                          
                            //editar
                            td = document.createElement(""td"");
                            a = document.createElement(""a"");
                            a.textContent = ""Editar"";
                            a.innerHTML = '<button type=\""button\"" class=\""btn btn-primary\""  data-bs-toggle=\""modal\"" data-bs-target=\""#exampleModal2\"" onclick=\""EditarConModal2(' + materiasCndo[i].idMateriaCursando + ')\"">Editar</button>';
                            td.appendChild(a);
                            tr.appendChild(td);

                            //eliminar
                            td = document.createElement(""td"");
                            a = document.createElement(""a"");
                            a.innerHTML = '<button type=\""button\"" class=\""btn btn-primary\"" onclick=\""EliminarConModal2(' + materiasCndo[i].idMateriaCursando + ')\"">Eliminar</button>';
                            td.appendChild(a);
       ");
            WriteLiteral(@"                     tr.appendChild(td);
                        }



                    }
                    // FIN DE CARGAR MATERIAS CURSANDO


                    // CARGAR MATERIAS CURSADAS EN LA TABLA
                    const materiasCdas = Object.values(estudiante.materiascursadas);
                    tabla1 = document.getElementById(""materiasCursadas"");
                    tbody1 = tabla1.querySelector(""tbody"");
                    console.log(tbody1);

                    for (let i = 0; i < materiasCdas.length; i++) {

                        idmateriasCdas = materiasCdas[i].idMateriaCursada;
                        console.log(idmateriasCdas);

                        const tr = document.createElement(""tr"");
                        tbody1.appendChild(tr);
                        //console.log(result[1]); 
                        //console.log(tabla);
                        console.log(materiasCdas);

                        var td = null;
                        var ");
            WriteLiteral(@"a = null;

                        td = document.createElement(""td"");
                        td.textContent = materiasCdas[i].idMateriaCursada;
                        tr.appendChild(td);

                        td = document.createElement(""td"");
                        td.textContent = materiasCdas[i].clave;
                        tr.appendChild(td);

                        td = document.createElement(""td"");
                        td.textContent = materiasCdas[i].materia;
                        tr.appendChild(td);


                        td = document.createElement(""td"");
                        td.textContent = materiasCdas[i].caliPrimerP;
                        tr.appendChild(td);

                        td = document.createElement(""td"");
                        td.textContent = materiasCdas[i].caliSegundoP;
                        tr.appendChild(td);

                        td = document.createElement(""td"");
                        td.textContent = materiasCdas[i].caliTe");
            WriteLiteral(@"rcerP;
                        tr.appendChild(td);

                        td = document.createElement(""td"");
                        td.textContent = materiasCdas[i].caliFinal;
                        tr.appendChild(td);


                        if (accion != ""CONSULTAR"") {


                            //editar
                            td = document.createElement(""td"");
                            a = document.createElement(""a"");
                            a.textContent = ""Editar"";
                            a.innerHTML = '<button type=\""button\"" class=\""btn btn-primary\"" data-bs-toggle=\""modal\"" data-bs-target=\""#exampleModal\"" onclick=\""EditarConModal(' + materiasCdas[i].idMateriaCursada + ')\"">Editar</button>';
                            td.appendChild(a);
                            tr.appendChild(td);

                            //eliminar
                            td = document.createElement(""td"");
                            a = document.createElement(""a"");
          ");
            WriteLiteral(@"                  a.innerHTML = '<button type=\""button\"" class=\""btn btn-primary\""  onclick=\""EliminarConModal1(' + materiasCdas[i].idMateriaCursada + ')\"">Eliminar</button>';
                            td.appendChild(a);
                            tr.appendChild(td);
                        }

                    }
                }
                //////////////////////////////////////

            })
            .catch(error => console.log('error', error));

        //3- Consumir el  servicio de obtener empleado por id

    }



    //Funcion Enviar el Estudiante 
    function Enviar() {

        //1 Inicio
        // 2 Obtner la accion por medio de la URL guardada en una varianble
        // Global

        if (accion == ""EDITAR"") {

            //3 Si es Editar
            //3.1 Obtener la peticion a traves del metodo obtnerPeticion
            var myHeaders = new Headers();
            myHeaders.append(""Content-Type"", ""application/json"");

            raw = obtenerPetic");
            WriteLiteral(@"ion();
            console.log(raw);
            //3.2 Declarar la Opciones de Peticion
            var requestOptions = {
                method: 'PUT',
                headers: myHeaders,
                body: raw,
                redirect: 'follow'
            };


            fetch(""https://localhost:5003/Estudiantes"", requestOptions)
                .then(response => {
                    if (response.status == 200) {
                        //3.3 Si se guardo correctament envia mensaje positivo de eso
                        alert(""Los datos se guardaron correctamente"");
                        const form = document.getElementById(""formulario"");
                        form.reset();
                    }

                    else {
                        //3.4 Si no se mandaron mostrar mensaje de error
                        alert(""Los datos no se guardaron correctamente, contacte al admin"");
                        console.log(""Los datos no se guardaron correctamente"", response");
            WriteLiteral(@");
                    }

                })
                .catch(error => {
                    //3.5 Si hubo otro error mandar mensaje
                    alert(""NO se pudo realizar la accion, contacte al admin"");
                    console.log(""No se pudo realizar la accion"", response)

                });


        }

        else if (accion == ""REGISTRO"") {
            //4 Si es REGISTRO
            //5.1 Obtener la peticion a traves del metodo obtnerPeticion
            var myHeaders = new Headers();
            myHeaders.append(""Content-Type"", ""application/json"");
            raw = obtenerPeticion();
            //5.2 Declarar la Opciones de Peticion
            var requestOptions = {
                method: 'POST',
                headers: myHeaders,
                body: raw,
                redirect: 'follow'
            };
            fetch(""https://localhost:5003/Estudiantes"", requestOptions)
                .then(response => {
                    if (response.statu");
            WriteLiteral(@"s == 200) {
                        //5.3 Si se guardo correctament envia mensaje positivo de eso
                        alert(""Los datos se guardaron correctamente"");

                        const form = document.getElementById(""formulario"");
                        form.reset();

                    }
                    else {
                        //5.4 Si no se mandaron mostrar mensaje de error
                        alert(""Los datos no se guardaron correctamente, contacte al admin"");
                        console.log(""Los datos no se guardaron correctamente"", response);
                    }

                })
                .catch(error => {
                    //5.5 Si hubo otro error mandar mensaje
                    alert(""NO se pudo realizar la accion, contacte al admin"");
                    console.log(""No se pudo realizar la accion"", response)

                });


        }


    }


    /// Funciones de Editar Boton Modal 1 MAterias Cursadas
    functio");
            WriteLiteral(@"n EditarConModal(id) {

        console.log(""id de modal  a eliminar "" + id);
        idmateriasCdas = id;
        cargarModal1Editar(id);
        accion2 = ""EDITAR"";


        // cargarModal1Editar(accion2);

    }

    /// Funciones Registrar Boton de Modal 1
    function RegistrarConModal() {

        accion2 = ""REGISTRO"";
        const idEstudianteMatCda = document.getElementById(""idEstudianteMatCda"");
        idEstudianteMatCda.value = idEstudiante;
        document.getElementById(""idEstudianteMatCda"").disabled = true;
    }

    function EliminarConModal1(idEliminar) {
        console.log(""id de modal  a eliminar "" + idEliminar);

        let eliminar = confirm(""Seguro que desea eliminar el Materia Cursada?"");

        if (eliminar) {

            var requestOptions = {
                method: 'DELETE',
                redirect: 'follow'
            };



            fetch(""https://localhost:5003/MateriasCursadas/"" + idEliminar, requestOptions)
                .then(r");
            WriteLiteral(@"esponse => response.text())
                .then(result => {
                    console.log(result)
                    console.log(""Materia eliminada correctamente"")

                    tabla1.removeChild(tbody1);

                    tbody1 = document.createElement(""tbody"");

                    tabla1.appendChild(tbody1);


                    tabla.removeChild(tbody);

                    tbody = document.createElement(""tbody"");

                    tabla.appendChild(tbody);

                    cargarEnpantalla();

                })
                .catch(error => {
                    console.log('error', error)
                    alert(""Hubo un error al eliminar, contacte al administrador"");
                });

        }

    }

    function EnviardelModal1() {

        if (accion2 == ""EDITAR"") {

            //3 Si es Editar
            //3.1 Obtener la peticion a traves del metodo obtnerPeticion
            var myHeaders = new Headers();
            myHeader");
            WriteLiteral(@"s.append(""Content-Type"", ""application/json"");

            raw = obtenerPeticionModal1();
            console.log(raw);
            //3.2 Declarar la Opciones de Peticion
            var requestOptions = {
                method: 'PUT',
                headers: myHeaders,
                body: raw,
                redirect: 'follow'
            };


            fetch(""https://localhost:5003/MateriasCursadas"", requestOptions)
                .then(response => {
                    if (response.status == 200) {
                        //3.3 Si se guardo correctament envia mensaje positivo de eso
                        alert(""Los datos se guardaron correctamente"");
                        const formModal1 = document.getElementById(""formModal1"");
                        formModal1.reset();

                        tabla1.removeChild(tbody1);

                        tbody1 = document.createElement(""tbody"");

                        tabla1.appendChild(tbody1);


                       ");
            WriteLiteral(@" tabla.removeChild(tbody);

                        tbody = document.createElement(""tbody"");

                        tabla.appendChild(tbody);

                        cargarEnpantalla();
                    }

                    else {
                        //3.4 Si no se mandaron mostrar mensaje de error
                        alert(""Los datos no se guardaron correctamente, contacte al admin"");
                        console.log(""Los datos no se guardaron correctamente"", response);
                    }

                })
                .catch(error => {
                    //3.5 Si hubo otro error mandar mensaje
                    alert(""NO se pudo realizar la accion, contacte al admin"");
                    console.log(""No se pudo realizar la accion"", response)

                });


        }
        else if (accion2 == ""REGISTRO"") {
            //4 Si es REGISTRO
            //5.1 Obtener la peticion a traves del metodo obtnerPeticion
            var myHeaders = new ");
            WriteLiteral(@"Headers();
            myHeaders.append(""Content-Type"", ""application/json"");
            raw = obtenerPeticionModal1();
            //5.2 Declarar la Opciones de Peticion
            var requestOptions = {
                method: 'POST',
                headers: myHeaders,
                body: raw,
                redirect: 'follow'
            };
            fetch(""https://localhost:5003/MateriasCursadas"", requestOptions)
                .then(response => {
                    if (response.status == 200) {
                        //5.3 Si se guardo correctament envia mensaje positivo de eso
                        alert(""Los datos se guardaron correctamente"");

                        const formModal1 = document.getElementById(""formModal1"");
                        formModal1.reset();

                        tabla1.removeChild(tbody1);

                        tbody1 = document.createElement(""tbody"");

                        tabla1.appendChild(tbody1);


                        t");
            WriteLiteral(@"abla.removeChild(tbody);

                        tbody = document.createElement(""tbody"");

                        tabla.appendChild(tbody);

                        cargarEnpantalla();

                    }
                    else {
                        //5.4 Si no se mandaron mostrar mensaje de error
                        alert(""Los datos no se guardaron correctamente, contacte al admin"");
                        console.log(""Los datos no se guardaron correctamente"", response);
                    }

                })
                .catch(error => {
                    //5.5 Si hubo otro error mandar mensaje
                    alert(""NO se pudo realizar la accion, contacte al admin"");
                    console.log(""No se pudo realizar la accion"", response)

                });


        }

    }


    function cargarModal1Editar(idmateriasCdas) {
        //1 Iniciar

        //2 Obtener id empleado

        //  meter consulta para ver si el idEstudiante esta e");
            WriteLiteral(@"n la base de las materias

        var requestOptions = {
            method: 'GET',
            redirect: 'follow'
        };

        fetch(""https://localhost:5003/MateriasCursadas/"" + idmateriasCdas, requestOptions)
            .then(response => response.json())
            .then(materiaCursada => {


                const idEstudianteMatCda = document.getElementById(""idEstudianteMatCda"");
                const clave = document.getElementById(""claveMatCda"");
                const materia = document.getElementById(""materiaCda"");
                const caliPrimerPMCda = document.getElementById(""caliPrimerPMCda"");
                const caliSegundoPMCda = document.getElementById(""caliSegundoPMCda"");
                const caliTercerPMCda = document.getElementById(""caliTercerPMCda"");

                //3.3 - Pintar las propiedades en los elementos html
                idEstudianteMatCda.value = materiaCursada.idEstudiante;
                clave.value = materiaCursada.clave;
                m");
            WriteLiteral(@"ateria.value = materiaCursada.materia;
                caliPrimerPMCda.value = materiaCursada.caliPrimerP;
                caliSegundoPMCda.value = materiaCursada.caliSegundoP;
                caliTercerPMCda.value = materiaCursada.caliTercerP;




            })
            .catch(error => console.log('error', error));

        //3- Consumir el  servicio de obtener empleado por id

    }

    function obtenerPeticionModal1() {

        //1 Inicio
        //2 Obtener los valores de los elemetos html y sus valores
        const idEstudianteMatCda = document.getElementById(""idEstudianteMatCda"").value;
        const clave = document.getElementById(""claveMatCda"").value;
        const materia = document.getElementById(""materiaCda"").value;
        const caliPrimerPMCda = document.getElementById(""caliPrimerPMCda"").value;
        const caliSegundoPMCda = document.getElementById(""caliSegundoPMCda"").value;
        const caliTercerPMCda = document.getElementById(""caliTercerPMCda"").value;


   ");
            WriteLiteral(@"     //3       Crear la peticion JSON  
        var raw = JSON.stringify({
            ""idMateriaCursada"": idmateriasCdas,
            ""idEstudiante"": idEstudianteMatCda,
            ""clave"": clave,
            ""materia"": materia,
            ""caliPrimerP"": caliPrimerPMCda,
            ""caliSegundoP"": caliSegundoPMCda,
            ""caliTercerP"": caliTercerPMCda,
            ""caliFinal"": 0,
            ""activo"": true
        });

        return raw;

    }

    ///////////////////////////////////////////////////////////////////////////

    /// Funciones de Editar Boton Modal 2 MAterias Cursando
    function EditarConModal2(id) {

        console.log(""id de modal  a editar "" + id);
        idmateriasCndo = id;
        cargarModal2Editar(id);
        accion2 = ""EDITAR"";
        // cargarModal1Editar(accion2);

    }

    /// Funciones Registrar Boton de Modal 2 Materias Cursando
    function RegistrarConModal2() {

        accion2 = ""REGISTRO"";
        const idEstudianteMatCndo");
            WriteLiteral(@" = document.getElementById(""idEstudianteMatCndo"");
        idEstudianteMatCndo.value = idEstudiante;
        document.getElementById(""idEstudianteMatCndo"").disabled = true;



    }

    function EliminarConModal2(idEliminar) {
        console.log(""id de modal  a eliminar "" + idEliminar);

        let eliminar = confirm(""Seguro que desea eliminar el Materia Cursada?"");

        if (eliminar) {

            var requestOptions = {
                method: 'DELETE',
                redirect: 'follow'
            };



            fetch(""https://localhost:5003/MateriasCursando/"" + idEliminar, requestOptions)
                .then(response => response.text())
                .then(result => {
                    console.log(result);
                    console.log(""Materia eliminada correctamente"");

                    tabla1.removeChild(tbody1);

                    tbody1 = document.createElement(""tbody"");

                    tabla1.appendChild(tbody1);


                    t");
            WriteLiteral(@"abla.removeChild(tbody);

                    tbody = document.createElement(""tbody"");

                    tabla.appendChild(tbody);

                    cargarEnpantalla();
                })
                .catch(error => {
                    console.log('error', error)
                    alert(""Hubo un error al eliminar, contacte al administrador"");
                });

        }

    }

    function EnviardelModal2() {

        if (accion2 == ""EDITAR"") {

            //3 Si es Editar
            //3.1 Obtener la peticion a traves del metodo obtnerPeticion
            var myHeaders = new Headers();
            myHeaders.append(""Content-Type"", ""application/json"");

            raw = obtenerPeticionModal2();
            console.log(raw);
            //3.2 Declarar la Opciones de Peticion
            var requestOptions = {
                method: 'PUT',
                headers: myHeaders,
                body: raw,
                redirect: 'follow'
            };


  ");
            WriteLiteral(@"          fetch(""https://localhost:5003/MateriasCursando"", requestOptions)
                .then(response => {
                    if (response.status == 200) {
                        //3.3 Si se guardo correctament envia mensaje positivo de eso
                        alert(""Los datos se guardaron correctamente"");
                        const formModal2 = document.getElementById(""formModal2"");
                        formModal2.reset();

                        tabla1.removeChild(tbody1);

                        tbody1 = document.createElement(""tbody"");

                        tabla1.appendChild(tbody1);


                        tabla.removeChild(tbody);

                        tbody = document.createElement(""tbody"");

                        tabla.appendChild(tbody);

                        cargarEnpantalla();
                    }

                    else {
                        //3.4 Si no se mandaron mostrar mensaje de error
                        alert(""Los datos no ");
            WriteLiteral(@"se guardaron correctamente, contacte al admin"");
                        console.log(""Los datos no se guardaron correctamente"", response);
                    }

                })
                .catch(error => {
                    //3.5 Si hubo otro error mandar mensaje
                    alert(""NO se pudo realizar la accion, contacte al admin"");
                    console.log(""No se pudo realizar la accion"", response)

                });


        }
        else if (accion2 == ""REGISTRO"") {
            //4 Si es REGISTRO
            //5.1 Obtener la peticion a traves del metodo obtnerPeticion
            var myHeaders = new Headers();
            myHeaders.append(""Content-Type"", ""application/json"");
            raw = obtenerPeticionModal2();
            //5.2 Declarar la Opciones de Peticion
            var requestOptions = {
                method: 'POST',
                headers: myHeaders,
                body: raw,
                redirect: 'follow'
            };
      ");
            WriteLiteral(@"      fetch(""https://localhost:5003/MateriasCursando"", requestOptions)
                .then(response => {
                    if (response.status == 200) {
                        //5.3 Si se guardo correctament envia mensaje positivo de eso
                        alert(""Los datos se guardaron correctamente"");

                        const formModal2 = document.getElementById(""formModal2"");

                        formModal2.reset();

                        tabla1.removeChild(tbody1);

                        tbody1 = document.createElement(""tbody"");

                        tabla1.appendChild(tbody1);


                        tabla.removeChild(tbody);

                        tbody = document.createElement(""tbody"");

                        tabla.appendChild(tbody);

                    }
                    else {
                        //5.4 Si no se mandaron mostrar mensaje de error
                        alert(""Los datos no se guardaron correctamente, contacte al admin"")");
            WriteLiteral(@";
                        console.log(""Los datos no se guardaron correctamente"", response);
                    }

                })
                .catch(error => {
                    //5.5 Si hubo otro error mandar mensaje
                    alert(""NO se pudo realizar la accion, contacte al admin"");
                    console.log(""No se pudo realizar la accion"", response)

                });


        }

    }


    function cargarModal2Editar(idmateriasCndo) {
        //1 Iniciar

        //2 Obtener id empleado

        //  meter consulta para ver si el idEstudiante esta en la base de las materias

        var requestOptions = {
            method: 'GET',
            redirect: 'follow'
        };

        fetch(""https://localhost:5003/MateriasCursando/"" + idmateriasCndo, requestOptions)
            .then(response => response.json())
            .then(materiaCursando => {

                console.log(accion2);

                const idEstudianteMatCndo = document.g");
            WriteLiteral(@"etElementById(""idEstudianteMatCndo"");
                const claveMatCdo = document.getElementById(""claveMatCdo"");
                const materiaCdo = document.getElementById(""materiaCdo"");
                const horario = document.getElementById(""horarioMat"");
                const caliPrimerPMCdo = document.getElementById(""caliPrimerPMCdo"");
                const caliSegundoPMCdo = document.getElementById(""caliSegundoPMCdo"");
                const caliTercerPMCdo = document.getElementById(""caliTercerPMCdo"");

                //3.3 - Pintar las propiedades en los elementos html
                idEstudianteMatCndo.value = materiaCursando.idEstudiante;
                claveMatCdo.value = materiaCursando.clave;
                materiaCdo.value = materiaCursando.materia;
                horario.value = materiaCursando.horario;
                caliPrimerPMCdo.value = materiaCursando.caliPrimerP;
                caliSegundoPMCdo.value = materiaCursando.caliSegundoP;
                caliTercerPMCdo.valu");
            WriteLiteral(@"e = materiaCursando.caliTercerP;

            })
            .catch(error => console.log('error', error));

        //3- Consumir el  servicio de obtener empleado por id

    }

    function obtenerPeticionModal2() {

        //1 Inicio
        //2 Obtener los valores de los elemetos html y sus valores
        const idEstudianteMatCndo = document.getElementById(""idEstudianteMatCndo"").value;
        const claveMatCdo = document.getElementById(""claveMatCdo"").value;
        const materiaCdo = document.getElementById(""materiaCdo"").value;
        const horario = document.getElementById(""horarioMat"").value;
        const caliPrimerPMCdo = document.getElementById(""caliPrimerPMCdo"").value;
        const caliSegundoPMCdo = document.getElementById(""caliSegundoPMCdo"").value;
        const caliTercerPMCdo = document.getElementById(""caliTercerPMCdo"").value;


        //3       Crear la peticion JSON  
        var raw = JSON.stringify({
            ""idMateriaCursando"": idmateriasCndo,
            """);
            WriteLiteral(@"idEstudiante"": idEstudianteMatCndo,
            ""clave"": claveMatCdo,
            ""materia"": materiaCdo,
            ""horario"": horario,
            ""caliPrimerP"": caliPrimerPMCdo,
            ""caliSegundoP"": caliSegundoPMCdo,
            ""caliTercerP"": caliTercerPMCdo,
            ""activo"": true
        });

        return raw;

    }






</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
